// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"sync"

	"github.com/remove-bg/go/client"
)

type FakeClientInterface struct {
	RemoveFromFileStub        func(string, string, map[string]string) ([]byte, string, error)
	removeFromFileMutex       sync.RWMutex
	removeFromFileArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 map[string]string
	}
	removeFromFileReturns struct {
		result1 []byte
		result2 string
		result3 error
	}
	removeFromFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientInterface) RemoveFromFile(arg1 string, arg2 string, arg3 map[string]string) ([]byte, string, error) {
	fake.removeFromFileMutex.Lock()
	ret, specificReturn := fake.removeFromFileReturnsOnCall[len(fake.removeFromFileArgsForCall)]
	fake.removeFromFileArgsForCall = append(fake.removeFromFileArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 map[string]string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveFromFile", []interface{}{arg1, arg2, arg3})
	fake.removeFromFileMutex.Unlock()
	if fake.RemoveFromFileStub != nil {
		return fake.RemoveFromFileStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.removeFromFileReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeClientInterface) RemoveFromFileCallCount() int {
	fake.removeFromFileMutex.RLock()
	defer fake.removeFromFileMutex.RUnlock()
	return len(fake.removeFromFileArgsForCall)
}

func (fake *FakeClientInterface) RemoveFromFileCalls(stub func(string, string, map[string]string) ([]byte, string, error)) {
	fake.removeFromFileMutex.Lock()
	defer fake.removeFromFileMutex.Unlock()
	fake.RemoveFromFileStub = stub
}

func (fake *FakeClientInterface) RemoveFromFileArgsForCall(i int) (string, string, map[string]string) {
	fake.removeFromFileMutex.RLock()
	defer fake.removeFromFileMutex.RUnlock()
	argsForCall := fake.removeFromFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClientInterface) RemoveFromFileReturns(result1 []byte, result2 string, result3 error) {
	fake.removeFromFileMutex.Lock()
	defer fake.removeFromFileMutex.Unlock()
	fake.RemoveFromFileStub = nil
	fake.removeFromFileReturns = struct {
		result1 []byte
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientInterface) RemoveFromFileReturnsOnCall(i int, result1 []byte, result2 string, result3 error) {
	fake.removeFromFileMutex.Lock()
	defer fake.removeFromFileMutex.Unlock()
	fake.RemoveFromFileStub = nil
	if fake.removeFromFileReturnsOnCall == nil {
		fake.removeFromFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 string
			result3 error
		})
	}
	fake.removeFromFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeFromFileMutex.RLock()
	defer fake.removeFromFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.ClientInterface = new(FakeClientInterface)
